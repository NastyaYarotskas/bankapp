pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'mydb'
        DB_USER         = 'myuser'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
//         stage('Build & Unit Tests') {
//             steps {
//                sh 'mvn clean package -DskipTests'
//             }
//         }
//
//         stage('Build Docker Images') {
//             steps {
//                 sh """
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-accounts-service:latest accounts-service
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-blocker-service:latest blocker-service
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-cash-service:latest cash-service
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-exchange-generator-service:latest exchange-generator-service
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-exchange-service:latest exchange-service
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-front-ui:latest front-ui
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-notification-service:latest notification-service
//                 docker build -t ghcr.io/nastyayarotskas/bankapp-transfer-service:latest transfer-service
//                 """
//             }
//         }

//         stage('Push Docker Images') {
//             steps {
//                 withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
//                     sh """
//                     echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
//                     docker push ghcr.io/nastyayarotskas/bankapp-accounts-service:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-blocker-service:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-cash-service:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-exchange-generator-service:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-exchange-service:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-front-ui:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-notification-service:latest
//                     docker push ghcr.io/nastyayarotskas/bankapp-transfer-service:latest
//                     """
//                 }
//             }
//         }

//         stage('Install Keycloak to TEST') {
//             steps {
//                 sh """
//                 kubectl apply -f keycloak-deployment.yaml -n test
//                 """
//             }
//         }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install bankapp ./deployment --namespace test --insecure-skip-tls-verify
                """
            }
        }

//         stage('Manual Approval for PROD') {
//             steps {
//                 input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
//             }
//         }

//         stage('Install PostgreSQL to PROD') {
//             steps {
//                 sh """
//                 helm upgrade --install postgres bitnami/postgresql \\
//                   --namespace prod --create-namespace \\
//                   --set auth.database=${DB_NAME} \\
//                   --set auth.username=${DB_USER} \\
//                   --set auth.password=${DB_PASSWORD}
//                 """
//             }
//         }

//         stage('Create DB Secrets for PROD') {
//             steps {
//                 sh """
//                 kubectl create secret generic customer-service-customer-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n prod --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic order-service-order-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n prod --dry-run=client -o yaml | kubectl apply -f -
//                 """
//             }
//         }

//         stage('Helm Deploy to PROD') {
//             steps {
//                 sh """
//                 helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
//                   --namespace prod --create-namespace \\
//                   --set image.repository=${DOCKER_REGISTRY}/customer-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=customer.prod.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install order-service my-microservices-app/charts/order-service \\
//                   --namespace prod --create-namespace \\
//                   --set image.repository=${DOCKER_REGISTRY}/order-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=order.prod.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//                 """
//             }
//         }
    }
}